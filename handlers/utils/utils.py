import random
from typing import List

from telebot import types

from db.models import Words
from handlers.bot_constants import Command


def create_menu_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞.

    :return: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    start_btn = types.KeyboardButton(Command.START)
    knowledge_base_btn = types.KeyboardButton(Command.KNOWLEDGE_BASE)
    studying_btn = types.KeyboardButton(Command.STUDYING)
    studyed_btn = types.KeyboardButton(Command.STUDYED)

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(start_btn, knowledge_base_btn, studying_btn, studyed_btn)
    return markup


def create_keyboard_with_words(obj_target_word: Words, others: List[str]):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ.

    :param obj_target_word: –°–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.
    :param others: –°–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞.
    :return: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    markup = types.ReplyKeyboardMarkup(row_width=2)

    target_word_btn = types.KeyboardButton(obj_target_word.translate)
    buttons = [target_word_btn]

    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)

    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            markup.add(buttons[i], buttons[i + 1])
        else:
            markup.add(buttons[i])

    return markup


def get_obj_next_or_default_word(bot, message, obj_words: Words, next_word: bool = False, back_word: bool = False):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ.

    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param obj_words: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–ª–æ–≤.
    :param next_word: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞.
    :param back_word: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ–≤–∞.
    :return: –°–ª–æ–≤–æ.
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data.get('target_word')
    words = [word.word for word in obj_words]

    word = obj_words[0]
    if target_word:
        if target_word in words:
            index = words.index(target_word)
            if next_word and index < len(words) - 1:
                word = obj_words[index + 1]
            elif back_word and index > 0:
                word = obj_words[index - 1]

    return word


def get_page_words_message(obj_words: List[str], page: int) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

    :param obj_words: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤.
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    """
    start_index = page * 10
    end_index = min(len(obj_words), (page + 1) * 10)
    page_words = obj_words[start_index:end_index]
    word_list = "\n".join([word.translate for word in page_words])
    return f"–°–ª–æ–≤–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page + 1}:\n{word_list}"


def check_translation_choice(bot, message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å–ª–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text = message.text

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        translate_word = data['translate_word']

    if text == translate_word:
        hint = f"{target_word} -> {translate_word}"
        hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]

        hint = '\n'.join(hint_text)
    else:
        hint = f"–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{translate_word}"

    bot.send_message(message.chat.id, hint)
